# -*- coding: utf-8 -*-
"""handwrittendigit_recogniser.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15SBqcQKEZVumxBy5UIkNBCUCtF2nmQNa
"""

import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.mnist.load_data()


train_images = train_images.reshape((60000, 28 * 28)).astype("float32") / 255
test_images = test_images.reshape((10000, 28 * 28)).astype("float32") / 255

model = models.Sequential([
    layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D(pool_size=(2, 2)),
    layers.Conv2D(64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D(pool_size=(2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])


train_images = train_images.reshape((60000, 28, 28, 1)).astype("float32") / 255
test_images = test_images.reshape((10000, 28, 28, 1)).astype("float32") / 255


model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))


model.save("mnist_ann_model.h5")

def preprocess_image(image_path):
    img = Image.open(image_path).convert("L")
    img = img.resize((28, 28))
    img = np.array(img)
    img = img.reshape(1, 28 * 28)
    img = img.astype("float32") / 255
    return img

def predict_image(image_path):
    img = preprocess_image(image_path)
    prediction = model.predict(img)
    predicted_label = np.argmax(prediction)
    print(f"Predicted label: {predicted_label}")
    plt.imshow(img.reshape(28, 28), cmap="gray")
    plt.title(f"Predicted Label: {predicted_label}")
    plt.axis("off")
    plt.show()

predict_image("/3-Figure3-1.png")

predict_image("/5.jpeg")